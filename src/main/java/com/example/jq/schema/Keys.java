/*
 * This file is generated by jOOQ.
*/
package com.example.jq.schema;


import com.example.jq.schema.tables.Actor;
import com.example.jq.schema.tables.Address;
import com.example.jq.schema.tables.Category;
import com.example.jq.schema.tables.City;
import com.example.jq.schema.tables.Country;
import com.example.jq.schema.tables.Customer;
import com.example.jq.schema.tables.Film;
import com.example.jq.schema.tables.FilmActor;
import com.example.jq.schema.tables.FilmCategory;
import com.example.jq.schema.tables.FilmText;
import com.example.jq.schema.tables.Inventory;
import com.example.jq.schema.tables.Language;
import com.example.jq.schema.tables.Payment;
import com.example.jq.schema.tables.Rental;
import com.example.jq.schema.tables.Staff;
import com.example.jq.schema.tables.Store;
import com.example.jq.schema.tables.records.ActorRecord;
import com.example.jq.schema.tables.records.AddressRecord;
import com.example.jq.schema.tables.records.CategoryRecord;
import com.example.jq.schema.tables.records.CityRecord;
import com.example.jq.schema.tables.records.CountryRecord;
import com.example.jq.schema.tables.records.CustomerRecord;
import com.example.jq.schema.tables.records.FilmActorRecord;
import com.example.jq.schema.tables.records.FilmCategoryRecord;
import com.example.jq.schema.tables.records.FilmRecord;
import com.example.jq.schema.tables.records.FilmTextRecord;
import com.example.jq.schema.tables.records.InventoryRecord;
import com.example.jq.schema.tables.records.LanguageRecord;
import com.example.jq.schema.tables.records.PaymentRecord;
import com.example.jq.schema.tables.records.RentalRecord;
import com.example.jq.schema.tables.records.StaffRecord;
import com.example.jq.schema.tables.records.StoreRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>sakila</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<ActorRecord, Short> IDENTITY_ACTOR = Identities0.IDENTITY_ACTOR;
    public static final Identity<AddressRecord, Short> IDENTITY_ADDRESS = Identities0.IDENTITY_ADDRESS;
    public static final Identity<CategoryRecord, Byte> IDENTITY_CATEGORY = Identities0.IDENTITY_CATEGORY;
    public static final Identity<CityRecord, Short> IDENTITY_CITY = Identities0.IDENTITY_CITY;
    public static final Identity<CountryRecord, Short> IDENTITY_COUNTRY = Identities0.IDENTITY_COUNTRY;
    public static final Identity<CustomerRecord, Short> IDENTITY_CUSTOMER = Identities0.IDENTITY_CUSTOMER;
    public static final Identity<FilmRecord, Short> IDENTITY_FILM = Identities0.IDENTITY_FILM;
    public static final Identity<InventoryRecord, Integer> IDENTITY_INVENTORY = Identities0.IDENTITY_INVENTORY;
    public static final Identity<LanguageRecord, Byte> IDENTITY_LANGUAGE = Identities0.IDENTITY_LANGUAGE;
    public static final Identity<PaymentRecord, Short> IDENTITY_PAYMENT = Identities0.IDENTITY_PAYMENT;
    public static final Identity<RentalRecord, Integer> IDENTITY_RENTAL = Identities0.IDENTITY_RENTAL;
    public static final Identity<StaffRecord, Byte> IDENTITY_STAFF = Identities0.IDENTITY_STAFF;
    public static final Identity<StoreRecord, Byte> IDENTITY_STORE = Identities0.IDENTITY_STORE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = UniqueKeys0.KEY_ACTOR_PRIMARY;
    public static final UniqueKey<AddressRecord> KEY_ADDRESS_PRIMARY = UniqueKeys0.KEY_ADDRESS_PRIMARY;
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = UniqueKeys0.KEY_CATEGORY_PRIMARY;
    public static final UniqueKey<CityRecord> KEY_CITY_PRIMARY = UniqueKeys0.KEY_CITY_PRIMARY;
    public static final UniqueKey<CountryRecord> KEY_COUNTRY_PRIMARY = UniqueKeys0.KEY_COUNTRY_PRIMARY;
    public static final UniqueKey<CustomerRecord> KEY_CUSTOMER_PRIMARY = UniqueKeys0.KEY_CUSTOMER_PRIMARY;
    public static final UniqueKey<FilmRecord> KEY_FILM_PRIMARY = UniqueKeys0.KEY_FILM_PRIMARY;
    public static final UniqueKey<FilmActorRecord> KEY_FILM_ACTOR_PRIMARY = UniqueKeys0.KEY_FILM_ACTOR_PRIMARY;
    public static final UniqueKey<FilmCategoryRecord> KEY_FILM_CATEGORY_PRIMARY = UniqueKeys0.KEY_FILM_CATEGORY_PRIMARY;
    public static final UniqueKey<FilmTextRecord> KEY_FILM_TEXT_PRIMARY = UniqueKeys0.KEY_FILM_TEXT_PRIMARY;
    public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = UniqueKeys0.KEY_INVENTORY_PRIMARY;
    public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = UniqueKeys0.KEY_LANGUAGE_PRIMARY;
    public static final UniqueKey<PaymentRecord> KEY_PAYMENT_PRIMARY = UniqueKeys0.KEY_PAYMENT_PRIMARY;
    public static final UniqueKey<RentalRecord> KEY_RENTAL_PRIMARY = UniqueKeys0.KEY_RENTAL_PRIMARY;
    public static final UniqueKey<RentalRecord> KEY_RENTAL_RENTAL_DATE = UniqueKeys0.KEY_RENTAL_RENTAL_DATE;
    public static final UniqueKey<StaffRecord> KEY_STAFF_PRIMARY = UniqueKeys0.KEY_STAFF_PRIMARY;
    public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = UniqueKeys0.KEY_STORE_PRIMARY;
    public static final UniqueKey<StoreRecord> KEY_STORE_IDX_UNIQUE_MANAGER = UniqueKeys0.KEY_STORE_IDX_UNIQUE_MANAGER;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CityRecord> FK_ADDRESS_CITY = ForeignKeys0.FK_ADDRESS_CITY;
    public static final ForeignKey<CityRecord, CountryRecord> FK_CITY_COUNTRY = ForeignKeys0.FK_CITY_COUNTRY;
    public static final ForeignKey<CustomerRecord, StoreRecord> FK_CUSTOMER_STORE = ForeignKeys0.FK_CUSTOMER_STORE;
    public static final ForeignKey<CustomerRecord, AddressRecord> FK_CUSTOMER_ADDRESS = ForeignKeys0.FK_CUSTOMER_ADDRESS;
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE = ForeignKeys0.FK_FILM_LANGUAGE;
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE_ORIGINAL = ForeignKeys0.FK_FILM_LANGUAGE_ORIGINAL;
    public static final ForeignKey<FilmActorRecord, ActorRecord> FK_FILM_ACTOR_ACTOR = ForeignKeys0.FK_FILM_ACTOR_ACTOR;
    public static final ForeignKey<FilmActorRecord, FilmRecord> FK_FILM_ACTOR_FILM = ForeignKeys0.FK_FILM_ACTOR_FILM;
    public static final ForeignKey<FilmCategoryRecord, FilmRecord> FK_FILM_CATEGORY_FILM = ForeignKeys0.FK_FILM_CATEGORY_FILM;
    public static final ForeignKey<FilmCategoryRecord, CategoryRecord> FK_FILM_CATEGORY_CATEGORY = ForeignKeys0.FK_FILM_CATEGORY_CATEGORY;
    public static final ForeignKey<InventoryRecord, FilmRecord> FK_INVENTORY_FILM = ForeignKeys0.FK_INVENTORY_FILM;
    public static final ForeignKey<InventoryRecord, StoreRecord> FK_INVENTORY_STORE = ForeignKeys0.FK_INVENTORY_STORE;
    public static final ForeignKey<PaymentRecord, CustomerRecord> FK_PAYMENT_CUSTOMER = ForeignKeys0.FK_PAYMENT_CUSTOMER;
    public static final ForeignKey<PaymentRecord, StaffRecord> FK_PAYMENT_STAFF = ForeignKeys0.FK_PAYMENT_STAFF;
    public static final ForeignKey<PaymentRecord, RentalRecord> FK_PAYMENT_RENTAL = ForeignKeys0.FK_PAYMENT_RENTAL;
    public static final ForeignKey<RentalRecord, InventoryRecord> FK_RENTAL_INVENTORY = ForeignKeys0.FK_RENTAL_INVENTORY;
    public static final ForeignKey<RentalRecord, CustomerRecord> FK_RENTAL_CUSTOMER = ForeignKeys0.FK_RENTAL_CUSTOMER;
    public static final ForeignKey<RentalRecord, StaffRecord> FK_RENTAL_STAFF = ForeignKeys0.FK_RENTAL_STAFF;
    public static final ForeignKey<StaffRecord, AddressRecord> FK_STAFF_ADDRESS = ForeignKeys0.FK_STAFF_ADDRESS;
    public static final ForeignKey<StaffRecord, StoreRecord> FK_STAFF_STORE = ForeignKeys0.FK_STAFF_STORE;
    public static final ForeignKey<StoreRecord, StaffRecord> FK_STORE_STAFF = ForeignKeys0.FK_STORE_STAFF;
    public static final ForeignKey<StoreRecord, AddressRecord> FK_STORE_ADDRESS = ForeignKeys0.FK_STORE_ADDRESS;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<ActorRecord, Short> IDENTITY_ACTOR = Internal.createIdentity(Actor.ACTOR, Actor.ACTOR.ACTOR_ID);
        public static Identity<AddressRecord, Short> IDENTITY_ADDRESS = Internal.createIdentity(Address.ADDRESS, Address.ADDRESS.ADDRESS_ID);
        public static Identity<CategoryRecord, Byte> IDENTITY_CATEGORY = Internal.createIdentity(Category.CATEGORY, Category.CATEGORY.CATEGORY_ID);
        public static Identity<CityRecord, Short> IDENTITY_CITY = Internal.createIdentity(City.CITY, City.CITY.CITY_ID);
        public static Identity<CountryRecord, Short> IDENTITY_COUNTRY = Internal.createIdentity(Country.COUNTRY, Country.COUNTRY.COUNTRY_ID);
        public static Identity<CustomerRecord, Short> IDENTITY_CUSTOMER = Internal.createIdentity(Customer.CUSTOMER, Customer.CUSTOMER.CUSTOMER_ID);
        public static Identity<FilmRecord, Short> IDENTITY_FILM = Internal.createIdentity(Film.FILM, Film.FILM.FILM_ID);
        public static Identity<InventoryRecord, Integer> IDENTITY_INVENTORY = Internal.createIdentity(Inventory.INVENTORY, Inventory.INVENTORY.INVENTORY_ID);
        public static Identity<LanguageRecord, Byte> IDENTITY_LANGUAGE = Internal.createIdentity(Language.LANGUAGE, Language.LANGUAGE.LANGUAGE_ID);
        public static Identity<PaymentRecord, Short> IDENTITY_PAYMENT = Internal.createIdentity(Payment.PAYMENT, Payment.PAYMENT.PAYMENT_ID);
        public static Identity<RentalRecord, Integer> IDENTITY_RENTAL = Internal.createIdentity(Rental.RENTAL, Rental.RENTAL.RENTAL_ID);
        public static Identity<StaffRecord, Byte> IDENTITY_STAFF = Internal.createIdentity(Staff.STAFF, Staff.STAFF.STAFF_ID);
        public static Identity<StoreRecord, Byte> IDENTITY_STORE = Internal.createIdentity(Store.STORE, Store.STORE.STORE_ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = Internal.createUniqueKey(Actor.ACTOR, "KEY_actor_PRIMARY", Actor.ACTOR.ACTOR_ID);
        public static final UniqueKey<AddressRecord> KEY_ADDRESS_PRIMARY = Internal.createUniqueKey(Address.ADDRESS, "KEY_address_PRIMARY", Address.ADDRESS.ADDRESS_ID);
        public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = Internal.createUniqueKey(Category.CATEGORY, "KEY_category_PRIMARY", Category.CATEGORY.CATEGORY_ID);
        public static final UniqueKey<CityRecord> KEY_CITY_PRIMARY = Internal.createUniqueKey(City.CITY, "KEY_city_PRIMARY", City.CITY.CITY_ID);
        public static final UniqueKey<CountryRecord> KEY_COUNTRY_PRIMARY = Internal.createUniqueKey(Country.COUNTRY, "KEY_country_PRIMARY", Country.COUNTRY.COUNTRY_ID);
        public static final UniqueKey<CustomerRecord> KEY_CUSTOMER_PRIMARY = Internal.createUniqueKey(Customer.CUSTOMER, "KEY_customer_PRIMARY", Customer.CUSTOMER.CUSTOMER_ID);
        public static final UniqueKey<FilmRecord> KEY_FILM_PRIMARY = Internal.createUniqueKey(Film.FILM, "KEY_film_PRIMARY", Film.FILM.FILM_ID);
        public static final UniqueKey<FilmActorRecord> KEY_FILM_ACTOR_PRIMARY = Internal.createUniqueKey(FilmActor.FILM_ACTOR, "KEY_film_actor_PRIMARY", FilmActor.FILM_ACTOR.ACTOR_ID, FilmActor.FILM_ACTOR.FILM_ID);
        public static final UniqueKey<FilmCategoryRecord> KEY_FILM_CATEGORY_PRIMARY = Internal.createUniqueKey(FilmCategory.FILM_CATEGORY, "KEY_film_category_PRIMARY", FilmCategory.FILM_CATEGORY.FILM_ID, FilmCategory.FILM_CATEGORY.CATEGORY_ID);
        public static final UniqueKey<FilmTextRecord> KEY_FILM_TEXT_PRIMARY = Internal.createUniqueKey(FilmText.FILM_TEXT, "KEY_film_text_PRIMARY", FilmText.FILM_TEXT.FILM_ID);
        public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = Internal.createUniqueKey(Inventory.INVENTORY, "KEY_inventory_PRIMARY", Inventory.INVENTORY.INVENTORY_ID);
        public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = Internal.createUniqueKey(Language.LANGUAGE, "KEY_language_PRIMARY", Language.LANGUAGE.LANGUAGE_ID);
        public static final UniqueKey<PaymentRecord> KEY_PAYMENT_PRIMARY = Internal.createUniqueKey(Payment.PAYMENT, "KEY_payment_PRIMARY", Payment.PAYMENT.PAYMENT_ID);
        public static final UniqueKey<RentalRecord> KEY_RENTAL_PRIMARY = Internal.createUniqueKey(Rental.RENTAL, "KEY_rental_PRIMARY", Rental.RENTAL.RENTAL_ID);
        public static final UniqueKey<RentalRecord> KEY_RENTAL_RENTAL_DATE = Internal.createUniqueKey(Rental.RENTAL, "KEY_rental_rental_date", Rental.RENTAL.RENTAL_DATE, Rental.RENTAL.INVENTORY_ID, Rental.RENTAL.CUSTOMER_ID);
        public static final UniqueKey<StaffRecord> KEY_STAFF_PRIMARY = Internal.createUniqueKey(Staff.STAFF, "KEY_staff_PRIMARY", Staff.STAFF.STAFF_ID);
        public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = Internal.createUniqueKey(Store.STORE, "KEY_store_PRIMARY", Store.STORE.STORE_ID);
        public static final UniqueKey<StoreRecord> KEY_STORE_IDX_UNIQUE_MANAGER = Internal.createUniqueKey(Store.STORE, "KEY_store_idx_unique_manager", Store.STORE.MANAGER_STAFF_ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AddressRecord, CityRecord> FK_ADDRESS_CITY = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_CITY_PRIMARY, Address.ADDRESS, "fk_address_city", Address.ADDRESS.CITY_ID);
        public static final ForeignKey<CityRecord, CountryRecord> FK_CITY_COUNTRY = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_COUNTRY_PRIMARY, City.CITY, "fk_city_country", City.CITY.COUNTRY_ID);
        public static final ForeignKey<CustomerRecord, StoreRecord> FK_CUSTOMER_STORE = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_STORE_PRIMARY, Customer.CUSTOMER, "fk_customer_store", Customer.CUSTOMER.STORE_ID);
        public static final ForeignKey<CustomerRecord, AddressRecord> FK_CUSTOMER_ADDRESS = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_ADDRESS_PRIMARY, Customer.CUSTOMER, "fk_customer_address", Customer.CUSTOMER.ADDRESS_ID);
        public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_LANGUAGE_PRIMARY, Film.FILM, "fk_film_language", Film.FILM.LANGUAGE_ID);
        public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE_ORIGINAL = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_LANGUAGE_PRIMARY, Film.FILM, "fk_film_language_original", Film.FILM.ORIGINAL_LANGUAGE_ID);
        public static final ForeignKey<FilmActorRecord, ActorRecord> FK_FILM_ACTOR_ACTOR = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_ACTOR_PRIMARY, FilmActor.FILM_ACTOR, "fk_film_actor_actor", FilmActor.FILM_ACTOR.ACTOR_ID);
        public static final ForeignKey<FilmActorRecord, FilmRecord> FK_FILM_ACTOR_FILM = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_FILM_PRIMARY, FilmActor.FILM_ACTOR, "fk_film_actor_film", FilmActor.FILM_ACTOR.FILM_ID);
        public static final ForeignKey<FilmCategoryRecord, FilmRecord> FK_FILM_CATEGORY_FILM = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_FILM_PRIMARY, FilmCategory.FILM_CATEGORY, "fk_film_category_film", FilmCategory.FILM_CATEGORY.FILM_ID);
        public static final ForeignKey<FilmCategoryRecord, CategoryRecord> FK_FILM_CATEGORY_CATEGORY = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_CATEGORY_PRIMARY, FilmCategory.FILM_CATEGORY, "fk_film_category_category", FilmCategory.FILM_CATEGORY.CATEGORY_ID);
        public static final ForeignKey<InventoryRecord, FilmRecord> FK_INVENTORY_FILM = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_FILM_PRIMARY, Inventory.INVENTORY, "fk_inventory_film", Inventory.INVENTORY.FILM_ID);
        public static final ForeignKey<InventoryRecord, StoreRecord> FK_INVENTORY_STORE = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_STORE_PRIMARY, Inventory.INVENTORY, "fk_inventory_store", Inventory.INVENTORY.STORE_ID);
        public static final ForeignKey<PaymentRecord, CustomerRecord> FK_PAYMENT_CUSTOMER = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_CUSTOMER_PRIMARY, Payment.PAYMENT, "fk_payment_customer", Payment.PAYMENT.CUSTOMER_ID);
        public static final ForeignKey<PaymentRecord, StaffRecord> FK_PAYMENT_STAFF = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_STAFF_PRIMARY, Payment.PAYMENT, "fk_payment_staff", Payment.PAYMENT.STAFF_ID);
        public static final ForeignKey<PaymentRecord, RentalRecord> FK_PAYMENT_RENTAL = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_RENTAL_PRIMARY, Payment.PAYMENT, "fk_payment_rental", Payment.PAYMENT.RENTAL_ID);
        public static final ForeignKey<RentalRecord, InventoryRecord> FK_RENTAL_INVENTORY = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_INVENTORY_PRIMARY, Rental.RENTAL, "fk_rental_inventory", Rental.RENTAL.INVENTORY_ID);
        public static final ForeignKey<RentalRecord, CustomerRecord> FK_RENTAL_CUSTOMER = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_CUSTOMER_PRIMARY, Rental.RENTAL, "fk_rental_customer", Rental.RENTAL.CUSTOMER_ID);
        public static final ForeignKey<RentalRecord, StaffRecord> FK_RENTAL_STAFF = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_STAFF_PRIMARY, Rental.RENTAL, "fk_rental_staff", Rental.RENTAL.STAFF_ID);
        public static final ForeignKey<StaffRecord, AddressRecord> FK_STAFF_ADDRESS = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_ADDRESS_PRIMARY, Staff.STAFF, "fk_staff_address", Staff.STAFF.ADDRESS_ID);
        public static final ForeignKey<StaffRecord, StoreRecord> FK_STAFF_STORE = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_STORE_PRIMARY, Staff.STAFF, "fk_staff_store", Staff.STAFF.STORE_ID);
        public static final ForeignKey<StoreRecord, StaffRecord> FK_STORE_STAFF = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_STAFF_PRIMARY, Store.STORE, "fk_store_staff", Store.STORE.MANAGER_STAFF_ID);
        public static final ForeignKey<StoreRecord, AddressRecord> FK_STORE_ADDRESS = Internal.createForeignKey(com.example.jq.schema.Keys.KEY_ADDRESS_PRIMARY, Store.STORE, "fk_store_address", Store.STORE.ADDRESS_ID);
    }
}
